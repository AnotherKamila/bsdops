---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# debops.auth default variables [[[
# =================================

# .. contents:: Sections
#    :local:
#
# .. include:: ../../../includes/global.rst


# .. envvar:: auth_packages [[[
#
# List of Debian/Ubuntu packages installed by debops.auth
auth_packages: [ 'libpam-cracklib' ]

                                                                   # ]]]
# ---- nsswitch.conf options ----

# .. envvar:: auth_nsswitch [[[
#
# List of lookup databases that will be enabled in /etc/nsswitch.conf.
# Possible parameters: compat, files, ldap, sss, mdns
# Use of this variable for NSS management is depracted (see :ref:`debops.nsswitch`
# instead). It's still present here due to usage in other parts of
# the role.
auth_nsswitch: [ 'compat' ]

                                                                   # ]]]
# ---- Local user account configuration ----

# .. envvar:: auth_pwhistory_remember [[[
#
# Size of local password history, set to False to disable
auth_pwhistory_remember: '5'

                                                                   # ]]]
# .. envvar:: auth_cracklib [[[
#
# Enable password checking via cracklib
auth_cracklib: True

                                                                   # ]]]
# ---- /etc/ldap/ldap.conf options ----

# .. envvar:: auth_ldap_conf [[[
#
# Enable or disable /etc/ldap/ldap.conf configuration
auth_ldap_conf: True

                                                                   # ]]]
# .. envvar:: auth_ldap_conf_domain [[[
#
# Default DNS domain to use to generate base DN. Set to False to disable and
# configure custom BaseDN in 'auth_ldap_conf_hostdn'
auth_ldap_conf_domain: '{{ ansible_domain }}'

                                                                   # ]]]
# .. envvar:: auth_ldap_conf_hostdn [[[
#
# Custom prefix for base DN, each domain component should be an element of
# a list. If 'auth_ldap_conf_domain' is empty or False, you can configure here
# full base DN for your LDAP server
auth_ldap_conf_hostdn: []

                                                                   # ]]]
# .. envvar:: auth_ldap_conf_uri [[[
#
# List od LDAP servers accessed by this host. See ldap.conf(5) for details
auth_ldap_conf_uri: [ 'ldaps://ldap.{{ ansible_domain }}/' ]

                                                                   # ]]]
# .. envvar:: auth_ldap_conf_tls_cacert [[[
#
# CA certificate bundle used to authorize server certificates
auth_ldap_conf_tls_cacert: '/etc/ssl/certs/ca-certificates.crt'

                                                                   # ]]]
# .. envvar:: auth_ldap_conf_tls_reqcert [[[
#
# Level of certificate checking performed by ldap-utils (never, allow, try, demand)
auth_ldap_conf_tls_reqcert: 'demand'

                                                                   # ]]]
# .. envvar:: auth_ldap_conf_options [[[
#
# Other LDAP options in text block format
auth_ldap_conf_options: |
  SISZELIMIT       12
  TIMELIMIT        15
  DEREF            never

# ]]]
# ---- Local LDAP Name Service Daemon ----

# .. envvar:: auth_nslcd_conf [[[
#
# Enable or disable configuration
auth_nslcd_conf: True

                                                                   # ]]]
# .. envvar:: auth_nslcd_domain [[[
#
# Base domain to use for nslcd configuration
auth_nslcd_domain: '{{ ansible_domain }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_ldap_server [[[
#
# FQDN address of a LDAP server to configure in /etc/nslcd.conf
auth_nslcd_ldap_server: 'ldap.{{ auth_nslcd_domain }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_uri [[[
#
# List of LDAP servers to connect to
auth_nslcd_uri: [ 'ldap://{{ auth_nslcd_ldap_server }}/' ]

                                                                   # ]]]
# .. envvar:: auth_nslcd_base [[[
#
# List of LDAP search bases to use
auth_nslcd_base: [ '{{ "dc=" + auth_nslcd_domain.split(".") | join(",dc=") }}' ]

                                                                   # ]]]
# .. envvar:: auth_nslcd_tls_reqcert [[[
#
# Level of certificate checking performed by nslcd (never, allow, try, demand)
auth_nslcd_tls_reqcert: 'demand'

                                                                   # ]]]
# .. envvar:: auth_nslcd_tls_cacertfile [[[
#
# CA certficiate file to use to check server certificates
auth_nslcd_tls_cacertfile: '/etc/ssl/certs/ca-certificates.crt'

                                                                   # ]]]
# ---- LDAP host account ----

# A separate LDAP host account is required for by each host to have access to
# the LDAP database, because anonymous connections are denied.

# .. envvar:: auth_nslcd_bind_host_basedn [[[
#
# Base DN to use for host account
auth_nslcd_bind_host_basedn: '{{ "ou=Machines," + auth_nslcd_base[0] }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_bind_host_cn [[[
#
# Host account name
auth_nslcd_bind_host_cn: 'cn={{ ansible_hostname }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_bind_host_dn [[[
#
# Host account in LDAP database
auth_nslcd_bind_host_dn: '{{ auth_nslcd_bind_host_cn + "," + auth_nslcd_bind_host_basedn }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_bind_host_basepw [[[
#
# Base path to host password in 'secret/' directory.
# See 'debops.secret' Ansible role for more detauls.
auth_nslcd_bind_host_basepw: '{{ secret + "/credentials/" + ansible_fqdn + "/ldap/host/binddn/" + auth_nslcd_bind_host_dn }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_bind_host_password [[[
#
# Path to file with plaintext host password saved in secrets
auth_nslcd_bind_host_password: '{{ auth_nslcd_bind_host_basepw + ".password" }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_bind_host_hash [[[
#
# Path to file with Hash of host password saved in secrets
auth_nslcd_bind_host_hash: '{{ auth_nslcd_bind_host_basepw + ".hash" }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_password_length [[[
#
# Length of generated host password
auth_nslcd_password_length: '48'

                                                                   # ]]]
# .. envvar:: auth_nslcd_options [[[
#
# Additional options added to /etc/nslcd.conf, in a text block
auth_nslcd_options: False

                                                                   # ]]]
# ---- NSS LDAP authentication and filters ----

# .. envvar:: auth_nslcd_nss_min_uid [[[
#
# Minimal uidNumber which is considered for an LDAP query
auth_nslcd_nss_min_uid: '1000'

                                                                   # ]]]
# .. envvar:: auth_pam_mkhomedir_umask [[[
#
# Default umask for new home directories created by pam_mkhomedir module
auth_pam_mkhomedir_umask: '{{ ansible_local.core.homedir_umask
                              if (ansible_local|d() and
                                  ansible_local.core|d() and
                                  ansible_local.core.homedir_umask|d())
                              else "0027" }}'

                                                                   # ]]]
# .. envvar:: auth_nslcd_pam_authz_search [[[
#
# LDAP search filters which are used to limit access to the host or services.
# At least one search needs to return a valid entry, otherwise access is
# denied.
# Apparently this option can be specified multiple times in nslcd.conf but that
# didn't work. You still need to specify a list.
auth_nslcd_pam_authz_search: [ '{{ auth_nslcd_pam_authz_search_host_and_service }}' ]

                                                                   # ]]]
# .. envvar:: auth_nslcd_pam_authz_search_host [[[
#
# User account needs to have host= attribute
auth_nslcd_pam_authz_search_host: '(&(objectClass=posixAccount)(uid=$username)(|(host=$hostname)(host=$fqdn)(host=\\*.{{ ansible_domain }})(host=\\*)))'

                                                                   # ]]]
# .. envvar:: auth_nslcd_pam_authz_search_service [[[
#
# User account needs to to have authorizedService= attribute
auth_nslcd_pam_authz_search_service: '(&(objectClass=posixAccount)(uid=$username)(authorizedService=$service))'

                                                                   # ]]]
# .. envvar:: auth_nslcd_pam_authz_search_host_and_service [[[
#
# User account needs to have both host= and authorizedService= attributes
auth_nslcd_pam_authz_search_host_and_service: '(&(objectClass=posixAccount)(uid=$username)(authorizedService=$service)(|(host=$hostname)(host=$fqdn)(host=\\*.{{ ansible_domain }})(host=\\*)))'
                                                                   # ]]]
                                                                   # ]]]
