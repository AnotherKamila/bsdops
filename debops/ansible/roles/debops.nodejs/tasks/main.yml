---

- name: Get upstream APT GPG key
  apt_key:
    id: '{{ nodejs__upstream_key_id }}'
    keyserver: '{{ ansible_local.core.keyserver
                   if (ansible_local|d() and ansible_local.core|d() and
                       ansible_local.core.keyserver)
                   else "hkp://pool.sks-keyservers.net" }}'
    state: 'present'
  when: nodejs__upstream|bool

- name: Configure upstream APT repository
  apt_repository:
    repo: '{{ nodejs__upstream_repository }}'
    state: 'present'
    update_cache: True
  when: nodejs__upstream|bool

- name: Add upstream Yarn APT repository GPG key
  apt_key:
    id: '{{ nodejs__yarn_upstream_key_id }}'
    state: 'present'
    keyserver: '{{ ansible_local.core.keyserver
                   if (ansible_local|d() and ansible_local.core|d() and
                       ansible_local.core.keyserver)
                   else "hkp://pool.sks-keyservers.net" }}'
  when: nodejs__yarn_upstream|bool

- name: Add upstream Yarn APT repository
  apt_repository:
    repo: '{{ nodejs__yarn_upstream_repository }}'
    state: 'present'
    update_cache: True
  when: nodejs__yarn_upstream|bool

- name: Ensure that the distribution 'npm' package is uninstalled
  package:
    name: 'npm'
    state: 'absent'
  when: nodejs__npm_git_enabled|bool

- name: Install APT packages
  package:
    name: '{{ item }}'
    state: '{{ "latest"
               if (nodejs__upstream | bool and
                   (ansible_local|d() and ansible_local.nodejs|d() and
                    ansible_local.nodejs.upstream is defined and
                    not ansible_local.nodejs.upstream|bool))
               else "present" }}'
    autoremove: '{{ True
                    if (nodejs__upstream | bool and
                        (ansible_local|d() and ansible_local.nodejs|d() and
                         ansible_local.nodejs.upstream is defined and
                         not ansible_local.nodejs.upstream|bool))
                    else omit }}'
  with_flattened:
    - '{{ nodejs__base_packages }}'
    - '{{ nodejs__distribution_packages }}'
    - '{{ nodejs__packages }}'
    - '{{ nodejs__group_packages }}'
    - '{{ nodejs__host_packages }}'
    - '{{ nodejs__dependent_packages }}'

- name: Clone NPM repository
  git:
    repo: '{{ nodejs__npm_git_repo }}'
    dest: '{{ nodejs__npm_git_dest }}'
    version: '{{ nodejs__npm_git_version }}'
    update: '{{ nodejs__npm_git_update|bool }}'
  register: nodejs__register_npm_git
  when: nodejs__npm_git_enabled|bool

- name: Install NPM from source
  command: '{{ nodejs__npm_git_install_command }}'
  args:
    chdir: '{{ nodejs__npm_git_dest }}'
  when: nodejs__npm_git_enabled|bool and nodejs__register_npm_git is changed

- name: Install NPM packages
  npm:
    name:           '{{ item.name           | d(item) }}'
    state:          '{{ item.state          | d("present") }}'
    global:         '{{ (item.global        | d(True)) | bool }}'
    production:     '{{ (item.production    | d(nodejs__npm_production_mode)) | bool }}'
    version:        '{{ item.version        | d(omit) }}'
    registry:       '{{ item.registry       | d(omit) }}'
    executable:     '{{ item.executable     | d(omit) }}'
    ignore_scripts: '{{ item.ignore_scripts | d(omit) }}'
    path:           '{{ item.path           | d(omit) }}'
  with_flattened:
    - '{{ nodejs__npm_packages }}'
    - '{{ nodejs__npm_group_packages }}'
    - '{{ nodejs__npm_host_packages }}'
    - '{{ nodejs__npm_dependent_packages }}'
  when: nodejs__upstream|bool or nodejs__npm_git_enabled|bool

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save NodeJS local facts
  template:
    src: 'etc/ansible/facts.d/nodejs.fact.j2'
    dest: '/etc/ansible/facts.d/nodejs.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  register: nodejs__register_facts

- name: Update Ansible facts if they were modified
  action: setup
  when: nodejs__register_facts is changed
