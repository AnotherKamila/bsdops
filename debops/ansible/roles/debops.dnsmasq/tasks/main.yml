---

- name: Install required packages
  package:
    name: '{{ item }}'
    state: 'present'
  with_flattened:
    - '{{ dnsmasq__base_packages }}'
    - '{{ dnsmasq__packages }}'

- name: Get list of local search domains
  shell: grep search /etc/resolv.conf | cut -d' ' -f2- | tr ' ' '\n'
  register: dnsmasq__register_search
  changed_when: False

- name: Get dnsmasq version
  shell: dnsmasq --version | head -n 1 | awk '{print $3}'
  register: dnsmasq__version
  changed_when: False

- name: Create main dnsmasq configuration
  template:
    src: 'etc/dnsmasq.d/00_main.conf.j2'
    dest: '/etc/dnsmasq.d/00_main.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(True if (ansible_local|d() and ansible_local.core|d()
                       and ansible_local.core.unsafe_writes|d() | bool) else False) | bool) else omit }}'
  notify: [ 'Test and restart dnsmasq' ]

- name: Configure defaults for dnsmasq service
  template:
    src: 'etc/default/dnsmasq.j2'
    dest: '/etc/default/dnsmasq'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(True if (ansible_local|d() and ansible_local.core|d()
                       and ansible_local.core.unsafe_writes|d() | bool) else False) | bool) else omit }}'
  notify: [ 'Test and restart dnsmasq' ]

- name: Configure custom nameservers
  template:
    src: 'etc/resolvconf/upstream.conf.j2'
    dest: '/etc/resolvconf/upstream.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(True if (ansible_local|d() and ansible_local.core|d()
                       and ansible_local.core.unsafe_writes|d() | bool) else False) | bool) else omit }}'
  notify: [ 'Test and restart dnsmasq' ]
  when: dnsmasq__nameservers|d()

- name: Create interface dnsmasq configuration
  template:
    src: 'etc/dnsmasq.d/interface.conf.j2'
    dest: '/etc/dnsmasq.d/interface_{{ item.interface }}.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(True if (ansible_local|d() and ansible_local.core|d()
                       and ansible_local.core.unsafe_writes|d() | bool) else False) | bool) else omit }}'
  with_items: '{{ dnsmasq__interfaces }}'
  when: item.interface is defined and item.interface
  notify: [ 'Test and restart dnsmasq' ]

- name: Remove legacy configuration
  file:
    path: '{{ item }}'
    state: 'absent'
  with_flattened:
    - '/etc/ferm/filter-input.d/dnsmasq.conf'

- name: Remove legacy configuration
  file:
    path: '/etc/ferm/filter-input.d/dnsmasq_interface_{{ item.interface }}.conf'
    state: 'absent'
  when: item.interface|d()
  with_items: '{{ dnsmasq__interfaces }}'

- name: Allow access to TFTP in tcpwrappers
  template:
    src: 'etc/hosts.allow.d/50_dnsmasq_tftpd.j2'
    dest: '/etc/hosts.allow.d/50_dnsmasq_tftpd_{{ item.interface }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(True if (ansible_local|d() and ansible_local.core|d()
                       and ansible_local.core.unsafe_writes|d() | bool) else False) | bool) else omit }}'
  with_items: '{{ dnsmasq__interfaces }}'
  when: (dnsmasq__tftp|bool and item.interface|d())
  notify: [ 'Assemble hosts.allow.d' ]

- name: Make sure TFTP root directory exists
  file:
    path: '{{ dnsmasq__tftp_root }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: dnsmasq__tftp|bool

# Ansible facts [[[
- name: Make sure Ansible fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Create local facts of dnsmasq
  template:
    src: 'etc/ansible/facts.d/dnsmasq.fact.j2'
    dest: '/etc/ansible/facts.d/dnsmasq.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(True if (ansible_local|d() and ansible_local.core|d()
                       and ansible_local.core.unsafe_writes|d() | bool) else False) | bool) else omit }}'
  register: dnsmasq__register_facts

- name: Reload facts if they were modified
  action: setup
  when: dnsmasq__register_facts is changed
# ]]]
